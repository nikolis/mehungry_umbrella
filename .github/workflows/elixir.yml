name: Elixir CI

on: [push, pull_request]

env:
  MIX_ENV: test

jobs:
  deps:
    name: Dependencies
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        elixir: [1.11]
        otp: [23.2]

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v2
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}

      - name: Install Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile
          #mix dialyzer --plt
          #  static_code_analysis:
          #    name: Static Code Analysis
          #    needs: deps
          #    runs-on: ubuntu-18.04
          #
          #    strategy:
          #      matrix:
          #        elixir: [1.11]
          #        otp: [23.2]
          #    steps:
          #      - name: Cancel Previous Runs
          #        uses: styfle/cancel-workflow-action@0.6.0
          #        with:
          #          access_token: ${{ github.token }}
          #
          #      - name: Checkout
          #        uses: actions/checkout@v2
          #        with:
          #          fetch-depth: 0
          #
          #      - name: Setup
          #        uses: actions/setup-elixir@v1
          #        with:
          #          elixir-version: ${{ matrix.elixir }}
          #          otp-version: ${{ matrix.otp }}
          #      - name: Retrieve Cached Dependencies
          #        uses: actions/cache@v2
          #        id: mix-cache
          #        with:
          #          path: |
          #            deps
          #            _build
          #            priv/plts
          #          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}
          #
          #      - name: Check Code Formatting
          #        run: mix format --check-formatted
          #      - name: Run Credo
          #        run: mix credo
          #      - name: Run Dialyzer
          #        run: mix dialyzer --no-check --ignore-exit-status
          #  unit_tests:
          #    name: Unit Tests
          #    #    needs: deps
          #    runs-on: ubuntu-18.04
          #    #
          #    services:
          #        postgres:
          #            image: postgres:10
          #            env:
          #                POSTGRES_PASSWORD: postgres
          #            ports: ['5432:5432']
          #            options: >-
          #                --health-cmd pg_isready
          #                #                --health-interval 10s
          #                --health-timeout 5s
          #                --health-retries 5
          #    strategy:
          #      fail-fast: false
          #      matrix:
          #        elixir: [1.11]
          #        otp: [23.2]
          #    steps:
          #      - name: Cancel Previous Runs
          #        uses: styfle/cancel-workflow-action@0.6.0
          #        with:
          #          access_token: ${{ github.token }}
          #      - name: Checkout
          #        uses: actions/checkout@v2
          #        with:
          #    fetch-depth: 0
          #      - name: Setup
          #        uses: actions/setup-elixir@v1
          #        with:
          #          elixir-version: ${{ matrix.elixir }}
          #          otp-version: ${{ matrix.otp }}
          #      - name: Retrieve Cached Dependencies
          #        uses: actions/cache@v2
          #        id: mix-cache
          #        with:
          #          path: |
          #            deps
          #            _build
          #            priv/plts
          #          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}
          #      - name: Run test
          #        run: mix test --trace --slowest 10
          #        # run: mix test apps/foilapi/test --trace --slowest 10
  build:
    # The type of runner that the job will run on
    needs: [deps]
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Runs a single command using the runners shell
      - name: docker build django api
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cms_repo
          IMAGE_TAG: ${{ github.sha }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME_LD }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

        run: |
          docker build  -t $ECR_REGISTRY/mehyngry_ecr_repo:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/mehyngry_ecr_repo:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: deploy to cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mehyngry_ecr_repo
          IMAGE_TAG: ${{ github.sha }}
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/mehyngry_ecr_repo:${{ github.sha }}

        with:
          args: --namespace=mehungry-app-ns set image deployment/mehungry-app-deployment mehungry_app=$ECR_REGISTRY/mehyngry_ecr_repo:$IMAGE_TAG
